// ********RoostGPT********
/*
Test generated by RoostGPT for test karteKnoteTest using AI Type Open AI and AI Model gpt-4-1106-preview

Test generated for /recipients/persons_get for http method type GET in rest-assured framework

RoostTestHash=1ca3e13c85


*/

// ********RoostGPT********
package com.learnk8s.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;
import java.util.Arrays;

public class recipientsPersonsGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {""};
      envList = dataloader.load("src/test/java/com/learnk8s/RoostTest/recipients_personsGetTest.csv", envVarsList);
    }

  
    @Test  
    public void recipientsPersonsGet_Test() throws JSONException {
        this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0";  
          JSONObject requestBodyObject = new JSONObject();
          if(testData.get("RequestBody") != null){
              requestBodyObject = new JSONObject(testData.get("RequestBody"));
          }
                Response responseObj = given()
				.queryParam("size", testData.get("size") != null ? testData.get("size") : "")
				.queryParam("offset", testData.get("offset") != null ? testData.get("offset") : "")
				.queryParam("name", testData.get("name") != null ? testData.get("name") : "")
				.queryParam("birth-date", testData.get("birth-date") != null ? testData.get("birth-date") : "")
				.header("Token", testData.get("Token"))
                .when()
                .get("/recipients/persons")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();

              System.out.printf("Test Case %d: recipientsPersonsGet_Test \n", testNumber++);
              System.out.println("Request: GET /recipients/persons");
              System.out.println("Status Code: " + responseObj.statusCode());
              if (testData.get("statusCode") != null) {
                String statusCodeFromCSV = testData.get("statusCode");
                if (statusCodeFromCSV.contains("X")) {
                  MatcherAssert.assertThat(
                      "Expected a status code of category " + statusCodeFromCSV + ", but got "
                          + Integer.toString(responseObj.statusCode()) + " instead",
                      Integer.toString(responseObj.statusCode()).charAt(0), equalTo(statusCodeFromCSV.charAt(0)));
                } else {
                  MatcherAssert.assertThat(
                      Integer.toString(responseObj.statusCode()), equalTo(statusCodeFromCSV));
                }
              } 
              				else {  
      List<Integer> expectedStatusCodes = Arrays.asList(200,400,401);
				MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
          }
				String stringifiedStatusCode = Integer.toString(responseObj.statusCode());
        switch(responseObj.statusCode()){
        
          case 200:
            stringifiedStatusCode = "200";
            MatcherAssert.assertThat(contentType, equalTo("application/json"));
            break;
         
          case 400:
            stringifiedStatusCode = "400";
            MatcherAssert.assertThat(contentType, equalTo("application/json"));
            break;
         
          case 401:
            stringifiedStatusCode = "401";
            MatcherAssert.assertThat(contentType, equalTo("application/json"));
            break;
         
    }

      switch(Integer.toString(responseObj.statusCode()).charAt(0)){
      
    }

      
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else if(contentType.contains("application/json")){  
                response = responseObj.jsonPath(); 
              } else {
                System.out.println("Response content type found: "+contentType+", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
                continue;
              }
         
                if(stringifiedStatusCode.equals("200")){					System.out.println("Description: successful operation");
      
              if (response.get("total") != null) {
                  
                MatcherAssert.assertThat(response.get("total"), instanceOf(Integer.class));
              }
      
              if (response.get("persons") != null) {
                        
                  for (int i = 0; i < response.getList("persons").size(); i++) {      
              if (response.get("persons["+ i +"].id") != null) {
                  
                MatcherAssert.assertThat(response.get("persons["+ i +"].id"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].initials") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].initials"), matchesPattern("^[A-Z]{1,6}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].initials"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].firstName") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].firstName"), matchesPattern("^[\\p{L} .'-]{1,50}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].firstName"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].middleName") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].middleName"), matchesPattern("^[\\p{L} .'-]{1,20}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].middleName"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].lastName") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].lastName"), matchesPattern("^[\\p{L} .'-]{2,50}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].lastName"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].birthDate") != null) {
                  
                MatcherAssert.assertThat(response.get("persons["+ i +"].birthDate"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].birthPlace") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].birthPlace"), matchesPattern("^[\\p{L} .,'-]{2,100}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].birthPlace"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].phone") != null) {
                  
                MatcherAssert.assertThat(response.get("persons["+ i +"].phone"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].email") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].email"), matchesPattern("^(([^<>()[\\]\\.,;:\\s@\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\"]+)*)|(\\".+\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].email"), instanceOf(String.class));MatcherAssert.assertThat(
                    response.getString("persons["+ i +"].email"),
                  Matchers.matchesPattern("^[^\s@]+@[^\s@]+\.[^\s@]+$")
                ); 

              }
      
              if (response.get("persons["+ i +"].postalCode") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].postalCode"), matchesPattern("^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].postalCode"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].houseNumber") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].houseNumber"), matchesPattern("^\\d{1,6}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].houseNumber"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].houseNumberPostfix") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].houseNumberPostfix"), matchesPattern("^[a-zA-Z .,_'-]{0,20}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].houseNumberPostfix"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].countryCode") != null) {
                    
                MatcherAssert.assertThat(response.getString("persons["+ i +"].countryCode"), matchesPattern("^[A-Z]{2}$")); 
  
                MatcherAssert.assertThat(response.get("persons["+ i +"].countryCode"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].reference") != null) {
                  
                MatcherAssert.assertThat(response.get("persons["+ i +"].reference"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("persons["+ i +"].reference").length(), lessThanOrEqualTo(100));

              }
      
              if (response.get("persons["+ i +"].createdAt") != null) {
                  
                MatcherAssert.assertThat(response.get("persons["+ i +"].createdAt"), instanceOf(String.class));
              }
      
              if (response.get("persons["+ i +"].updatedAt") != null) {
                  
                MatcherAssert.assertThat(response.get("persons["+ i +"].updatedAt"), instanceOf(String.class));
              }
        
                    }    
                MatcherAssert.assertThat(response.getList("persons"), instanceOf(List.class));

              }
				}
if(stringifiedStatusCode.equals("400")){					System.out.println("Description: Bad Request");
      
              if (response.get("error") != null) {
                  
                MatcherAssert.assertThat(response.get("error"), instanceOf(String.class));
              }
      
              if (response.get("description") != null) {
                  
                MatcherAssert.assertThat(response.get("description"), instanceOf(String.class));
              }
      
              if (response.get("error") != null) {
                    
                MatcherAssert.assertThat(response.getString("error"), matchesPattern("^validation/.*$")); 
  
                MatcherAssert.assertThat(response.get("error"), instanceOf(String.class));
              }
      
              if (response.get("description") != null) {
                  
                MatcherAssert.assertThat(response.get("description"), instanceOf(String.class));
              }
      
              if (response.get("field") != null) {
                  
                MatcherAssert.assertThat(response.get("field"), instanceOf(String.class));
              }
      
              if (response.get("schema_field") != null) {
                  
                MatcherAssert.assertThat(response.get("schema_field"), instanceOf(String.class));
              }
				}
if(stringifiedStatusCode.equals("401")){					System.out.println("Description: Authentication Required");
      
              if (response.get("error") != null) {
                  
                MatcherAssert.assertThat(response.get("error"), instanceOf(String.class));
              }
      
              if (response.get("description") != null) {
                  
                MatcherAssert.assertThat(response.get("description"), instanceOf(String.class));
              }
      
              if (response.get("error") != null) {
                    
                MatcherAssert.assertThat(response.getString("error"), matchesPattern("^validation/.*$")); 
  
                MatcherAssert.assertThat(response.get("error"), instanceOf(String.class));
              }
      
              if (response.get("description") != null) {
                  
                MatcherAssert.assertThat(response.get("description"), instanceOf(String.class));
              }
      
              if (response.get("field") != null) {
                  
                MatcherAssert.assertThat(response.get("field"), instanceOf(String.class));
              }
      
              if (response.get("schema_field") != null) {
                  
                MatcherAssert.assertThat(response.get("schema_field"), instanceOf(String.class));
              }
				}


            }  
    }
}
