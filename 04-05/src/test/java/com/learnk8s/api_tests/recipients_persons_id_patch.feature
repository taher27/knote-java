# ********RoostGPT********

# Test generated by RoostGPT for test karteKnoteTest using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /recipients/persons/{id}_patch for http method type PATCH 
# RoostTestHash=1416aa2295
# 
# 

# ********RoostGPT********
Feature: Update a Person Endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || 'http://localhost:4010'
    * url urlBase
    * header ApiKeyAuth = karate.properties['AUTH_TOKEN']

  Scenario Outline: Update a person with valid details
    Given path 'recipients/persons/', <id>
    And request <requestBody>
    When method put
    Then status 200
    And match responseHeaders contains { 'api-version': '#string' }
    And match response == <expectedResponse>

    Examples:
      | read('recipients_persons_id_patch.csv') |

  Scenario Outline: Update a person with invalid email format
    Given path 'recipients/persons/', <id>
    And request <requestBody>
    When method put
    Then status 400
    And match responseHeaders contains { 'api-version': '#string' }
    And match response == <expectedErrorResponse>

    Examples:
      | id                                     | requestBody                        | expectedErrorResponse                                                                                                                        |
      | '123e4567-e89b-12d3-a456-426614174000' | """{ "email": "invalid-email" }""" | """{ "error": "validation/email-pattern", "description": "Descriptive Error Message", "schema_field": "email", "value": "invalid-email" }""" |

  Scenario: Unauthorized update attempt
    Given path 'recipients/persons/123e4567-e89b-12d3-a456-426614174000'
    And request { "initials": "JD" }
    When method put
    Then status 401
    And match responseHeaders contains { 'api-version': '#string' }
    And match response contains { "error": "#string", "description": "Descriptive Error Message" }
