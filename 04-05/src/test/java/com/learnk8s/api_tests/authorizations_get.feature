# ********RoostGPT********

# Test generated by RoostGPT for test karteKnoteTest using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /authorizations_get for http method type GET 
# RoostTestHash=3b64f22044
# 
# 

# ********RoostGPT********
Feature: List accounts who have access to my account - Authorizations

  Background:
    * def urlBase = karate.properties['url.base'] || 'http://localhost:4010'
    * url urlBase

  Scenario Outline: Get the list of authorizations with valid API key
    Given path '/authorizations'
    And header ApiKeyAuth = karate.properties['AUTH_TOKEN']
    When method get
    Then status 200
    And match responseHeaders contains { 'api-version': '#string' }
    And match response == { total: '#number', authorizations: '#array' }
    And match each response.authorizations contains { id: '#uuid', name: '#regex(^[\\p{L} .\'-]{1,100}$)?', email: '#regex(^(([^<>()[\\]\\\\.,;:\\s@\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$)', createdAt: '#string', updatedAt: '#string' }

  Scenario: Get the list of authorizations without API key should return 401
    Given path '/authorizations'
    When method get
    Then status 401
    And match responseHeaders contains { 'api-version': '#string' }
    And match response == { description: '#string', error: '#string' }

  Scenario: Get the list of authorizations with invalid API key should return 401
    Given path '/authorizations'
    And header ApiKeyAuth = 'invalid_token'
    When method get
    Then status 401
    And match responseHeaders contains { 'api-version': '#string' }
    And match response == { description: '#string', error: '#string' }

  Scenario: Bad request with incorrect parameters should return 400
    Given path '/authorizations'
    And header ApiKeyAuth = karate.properties['AUTH_TOKEN']
    And params { invalid_param: 'test' }
    When method get
    Then status 400
    And match responseHeaders contains { 'api-version': '#string' }
    And match response == { description: '#string', error: '#string' }
