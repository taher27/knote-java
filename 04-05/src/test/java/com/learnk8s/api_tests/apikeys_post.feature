# ********RoostGPT********

# Test generated by RoostGPT for test karteKnoteTest using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /apikeys_post for http method type POST 
# RoostTestHash=28a54f1579
# 
# 

# ********RoostGPT********
Feature: API Keys Management

  Background:
    * def urlBase = karate.properties['url.base'] || 'http://localhost:4010'
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header ApiKeyAuth = authToken

  Scenario: Create API Key and validate response
    Given path '/apikeys'
    And header Content-Type = 'application/json'
    When method post
    Then status 201
    And match responseHeaders['api-version'] == '1.0.0'
    And match responseHeaders['location'] != null
    And match response ==
      """
      {
        id: '#uuid',
        token: '#regex(^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$)',
        createdAt: '#string'
      }
      """

  Scenario: Attempt to create API Key without authorization and validate 401 response
    Given path '/apikeys'
    And header Content-Type = 'application/json'
    And remove header ApiKeyAuth
    When method post
    Then status 401
    And match responseHeaders['api-version'] == '1.0.0'
    And match response ==
      """
      {
        error: '#string',
        description: '#string'
      }
      """

  Scenario: Attempt to create API Key with bad request and validate 400 response
    Given path '/apikeys'
    And header Content-Type = 'application/json'
    And request
      """
      {
        invalidField: 'invalid'
      }
      """
    When method post
    Then status 400
    And match responseHeaders['api-version'] == '1.0.0'
    And match response ==
      """
      {
        error: '#string',
        description: '#string'
      }
      """
